---
import type { HTMLAttributes, HTMLTag } from "astro/types";

export type TextProps<T extends HTMLTag = "p"> = HTMLAttributes<T> & {
  as?: T;
  variant?: "heading1" | "heading2" | "heading3" | "body" | "caption";
  colourOverride?: "secondary" | "white" | "green";
  className?: string;
};

const props = Astro.props as TextProps;
const { as = "p", variant = "body", className = "", colourOverride, ...rest } = props;

const Tag = as;

const variantClassMap = {
  heading1: "heading-xl",
  heading2: "heading-lg",
  heading3: "heading-md",
  body: "body",
  caption: "caption",
};
const colourMap = {
  secondary: "--color-text-secondary",
  white: "--color-white",
  green: "--color-accent"
}

const variantClass = variantClassMap[variant] ?? "";
const textColour = colourOverride ? `var(${colourMap[colourOverride]})` : "";

const parsedRest = {
  ...rest,
  ...(colourOverride && {style: {color: textColour}})
}
---

<Tag class={`${variantClass} ${className}`} {...parsedRest}>
  <slot />
</Tag>
